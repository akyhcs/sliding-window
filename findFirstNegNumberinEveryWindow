package com.tree.prac;

import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;

public class LinkListDemo {
	private static Predicate<Integer> isNumNegative = (I)->{return I<0;};
	public static void main(String[] args)
	{
		int arr[] = {12,-1,-7,8,-15,30,16,28};
		int windowSize = 3;
		findFirstNegNumberinEveryWindow(arr,windowSize);
	}

	private static void findFirstNegNumberinEveryWindow(int[] arr,int windowSize) {
		List<Integer> negLinkedList = new LinkedList<Integer>();
		for(int i =0,j=0;i<=arr.length-windowSize&&j<arr.length;i++)
		{
			if(i==0)
			{
				negLinkedList = getWindowSizeNegList(negLinkedList,arr,windowSize);
				j = windowSize-1;
			}
			else
			{
				if(negLinkedList.isEmpty()==false)
				{
					if(arr[i-1]==negLinkedList.get(0))
						negLinkedList.remove(0);
				}
				if(isNumNegative.test(arr[j]))
				{
					negLinkedList.add(arr[j]);
				}
			}
			if(negLinkedList.isEmpty())
			{
				System.out.print(0+" ,");
			}
			else
			{
				System.out.print(negLinkedList.get(0)+" ,");
			}
			j++;
		}
		System.out.println();		
	}

	private static List<Integer> getWindowSizeNegList(List<Integer> negLinkedList,
			int[] arr,int window) {
		
		for(int  i = 0;i<window;i++)
		{
			if(isNumNegative.test(arr[i]))
			{
				negLinkedList.add(arr[i]);
			}
		}
		return negLinkedList;
	}

}
